name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  schedule:
    - cron: "0 13 * * *"  # Every day at 1pm UTC

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - id: sentry-check-in
        name: "‚è≤Ô∏è Check-in with Sentry"
        env:
          SENTRY_MONITOR_ID: ${{ secrets.SENTRY_MONITOR_ID }}
          SENTRY_ORG_SLUG: ${{ secrets.SENTRY_ORG_NAME }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          curl -X POST \
            'https://sentry.io/api/0/organizations/${{ SENTRY_ORG_SLUG }}/monitors/${{ SENTRY_MONITOR_ID }}/checkins/' \
            --header 'Authorization: DSN ${{ SENTRY_DSN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{"status": "in_progress"}'

      - id: checkout
        name: "Checkout üõé"
        uses: actions/checkout@v2

      - id: setup-python
        name: "Setup Python ${{ matrix.python-version }} üèó"
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - id: setup-poetry
        name: "Setup Poetry üìù"
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - id: get-cache-poetry-directory
        name: "Get poetry's cache directory üîé"
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - id: cache-poetry-directory
        name: "Cache poetry üì¶"
        uses: actions/cache@v3.0.11
        with:
          path: ${{ steps.get-cache-poetry-directory.outputs.dir }}
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - id: install-dependencies
        name: "Install dependencies üë®üèª‚Äçüíª"
        run: make setup

      - id: cache-database
        name: "Cache dinesafe.db üì¶"
        uses: actions/cache@v3.0.11
        with:
          path: dinesafe.db
          key: dinesafe-db

      - id: build-database
        name: "Build the database üóÇÔ∏è"
        run: make build

      - id: deploy
        name: "Deploy datasets to Vercel üöÄ"
        env:
          VERCEL_PROJECT: ${{ secrets.VERCEL_PROJECT }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |-
          poetry run datasette publish vercel dinesafe.db \
            --metadata metadata.json \
            --token $VERCEL_TOKEN \
            --project $VERCEL_PROJECT \
            --scope $VERCEL_SCOPE \
            --install datasette-sentry \
            --install datasette-block-robots \
            --install datasette-dashboards \
            --install datasette-gzip

      - id: sentry-check-out
        name: "‚è≤Ô∏è Checkout with Sentry"
        env:
          SENTRY_MONITOR_ID: ${{ secrets.SENTRY_MONITOR_ID }}
          SENTRY_ORG_SLUG: ${{ secrets.SENTRY_ORG_NAME }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          curl -X POST \
            'https://sentry.io/api/0/organizations/${{ SENTRY_ORG_SLUG }}/monitors/${{ SENTRY_MONITOR_ID }}/checkins/' \
            --header 'Authorization: DSN ${{ SENTRY_DSN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{"status": "ok", "duration": 3000}'
